// String Replace
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
        str-replace(
            str-slice($string, $index + str-length($search)),
            $search,
            $replace
        );
    }

    @return $string;
}

// Font Face
@mixin font-face(
    $name,
    $path,
    $weight: null,
    $style: null,
    $exts: eot woff2 woff ttf svg
) {
    $src: null;

    $extmods: (
        eot: '?',
        svg: '#' + str-replace($name, ' ', '_')
    );

    $formats: (
        otf: 'opentype',
        ttf: 'truetype'
    );

    @each $ext in $exts {
    $extmod: if(
            map-has-key($extmods, $ext),
            $ext + map-get($extmods, $ext),
            $ext
        );
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append(
            $src,
            url(quote($path + '.' + $extmod)) format(quote($format)),
            comma
        );
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}

//usage: @include font($family, 1.1875rem, 300, normal, normal);
@mixin font($family, $size, $weight, $style, $stretch) {
    font: {
        family: $family;
        size: $size !important;
        weight: $weight !important;
        style: $style;
        stretch: $stretch;
    }
}

//usage: @include opacity(.4);
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity = $opacity-ie); //IE8
}

//usage: @include background-opacity([color],[opacity]);
@mixin background-opacity($color, $opacity: 0.3) {
    background: $color;
    background: rgba($color, $opacity);
}

//usage: @include transition([property],[duration],[easing]);
@mixin transition($property: all, $duration: .5s, $ease: linear){
    -webkit-transition: $property $duration $ease;
       -moz-transition: $property $duration $ease;
         -o-transition: $property $duration $ease;
            transition: $property $duration $ease;
}

//usage: @include box-shadow(0, 15px, 20px, 0, $color);
@mixin box-shadow($top, $left, $blur, $spread, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: $top $left $blur $spread $color inset;
           -moz-box-shadow: $top $left $blur $spread $color inset;
                box-shadow: $top $left $blur $spread $color inset;
    } @else {
        -webkit-box-shadow: $top $left $blur $spread $color;
           -moz-box-shadow: $top $left $blur $spread $color;
                box-shadow: $top $left $blur $spread $color;
    }
}

//usage: @include background-image('/my/img/path.png');
@mixin background-image($imgpath, $position:0 0, $repeat: no-repeat) {
    background: {
       image: url($imgpath);
       position: $position;
       repeat: $repeat;
    }
}

//use: @include retina("img/logo@2x.png", 100px, 21px);
@mixin retina($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        /* Serving 2x image on Retina display */
        background-image: url($image);
        background-size: $width $height;
    }
}

// usage: @include gradient(#ff00ff, #ff00cc, vertical);
@mixin gradient($start-color, $end-color, $orientation){
    background: $start-color;
    @if $orientation == vertical{
        // vertical
        background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
    } @else if $orientation == horizontal {
        // horizontal
        background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
    } @else {
        // radial
        background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
    }
}

//usage: @include border-radius ( $value: 3px );
@mixin border-radius ( $value: 3px ) {
    -webkit-border-radius: $value;
       -moz-border-radius: $value;
            border-radius: $value;
    // keeps background from busting out of border
    -webkit-background-clip: padding-box;
       -moz-background-clip: padding;
            background-clip: padding-box;
}

//usage: @include x-user-select;
@mixin x-user-select ($value: none) {
    -webkit-user-select: $value;
       -moz-user-select: $value;
        -ms-user-select: $value;
            user-select: $value;
}

//usage: @include padding(0, 0, 0, 0);
@mixin padding($top: null, $right: null, $bottom: null, $left: null) {
    padding: {
        top   : $top;
        right : $right;
        bottom: $bottom;
        left  : $left;
    }
}

//usage: @include margin(0, 0, 0, 0);
@mixin margin($top: null, $right: null, $bottom: null, $left: null) {
    margin: {
        top   : $top;
        right : $right;
        bottom: $bottom;
        left  : $left;
    }
}

//usage: @include input-placeholder() { color: red; font-weight: 300; padding-top: 5px; };
@mixin input-placeholder() {
    $selector: '';
    $prefixes: (
        moz   : "::-moz",
        webkit: "::-webkit",
        ie    : ":-ms"
    );

    @each $prop, $value in $prefixes {

        @if $prop != "moz" {
            $selector: #{$value}-input-placeholder;
        } @else {
            $selector: #{$value}-placeholder;
        }

        @if & {
            &#{$selector} {
                @content;
            }
        } @else {
            #{$selector} {
                @content;
            }
        }
    }

    &::placeholder {
        @content;
    }
}

//usage: @include backface-visibility; for default the state is hidden
@mixin backface-visibility($visibility: hidden) {
    -webkit-backface-visibility: $visibility;
       -moz-backface-visibility: $visibility;
        -ms-backface-visibility: $visibility;
         -o-backface-visibility: $visibility;
            backface-visibility: $visibility;
}

//usage: @include transform(rotate(20deg));
@mixin transform($transformation) {
    -webkit-transform: $transformation;
       -moz-transform: $transformation;
        -ms-transform: $transformation;
         -o-transform: $transformation;
            transform: $transformation;
}

//usage: @include transform-style(preserve-3d);
@mixin transform-style($style){
    -webkit-transform-style: $style;
       -moz-transform-style: $style;
         -o-transform-style: $style;
        -ms-transform-style: $style;
            transform-style: $style;
}

//usage: @include border(left, 1px, solid, $color)
@mixin border($direction: '', $width: 1px, $style: solid, $color: #000) {
    //border-$direction-width: medium|thin|thick|length|initial|inherit;
    //border-$direction-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
    //border-$direction-color: color|transparent|initial|inherit;
    @if $direction == '' {
        border-width: $width;
        border-style: $style;
        border-color: $color;
    } @else if $direction == left {
        border-left-width: $width;
        border-left-style: $style;
        border-left-color: $color;
    } @else if $direction == top {
        border-top-width: $width;
        border-top-style: $style;
        border-top-color: $color;
    } @else if $direction == right {
        border-right-width: $width;
        border-right-style: $style;
        border-right-color: $color;
    } @else if  $direction == bottom {
        border-bottom-width: $width;
        border-bottom-style: $style;
        border-bottom-color: $color;
    }
}

// Values: flex | inline-flex
@mixin flexbox {
    display: -webkit-box;
    display: -moz-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

%flexbox { @include flexbox; }

// usage : @include inline-flex
@mixin inline-flex {
    display: -webkit-inline-box;
    display: -moz-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}
  
%inline-flex { @include inline-flex; }

// Values: row (default) | row-reverse | column | column-reverse
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
           -webkit-box-orient: horizontal;
           -moz-box-direction: reverse;
              -moz-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
           -webkit-box-orient: vertical;
           -moz-box-direction: normal;
              -moz-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
           -webkit-box-orient: vertical;
           -moz-box-direction: reverse;
              -moz-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
           -webkit-box-orient: horizontal;
           -moz-box-direction: normal;
              -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
        -ms-flex-direction: $value;
            flex-direction: $value;
}
  
// Shorter version:
@mixin flex-dir($args...) { @include flex-direction($args...); }

// Values: nowrap (default) | wrap | wrap-reverse
@mixin flex-wrap($value: nowrap) {
    // No Webkit/FF Box fallback.
    -webkit-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

// Values: row (default) | nowrap
@mixin flex-flow($values: (row nowrap)) {
    // No Webkit/FF Box fallback.
    -webkit-flex-flow: $values;
        -ms-flex-flow: $values;
            flex-flow: $values;
}

// Value: any integer (0 is the default)
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
       -moz-box-ordinal-group: $int + 1;
                -webkit-order: $int;
               -ms-flex-order: $int;
                        order: $int;
}

// Value: any integer (0 is the default)
@mixin flex-grow($int: 1) {
    -webkit-flex-grow: $int;
     -webkit-box-flex: $int;
        -moz-box-flex: $int;
             -ms-flex: $int;
            flex-grow: $int;
}

// Value: any integer (0 is the default)
@mixin flex-shrink($int: 0) {
    -webkit-flex-shrink: $int;
       -moz-flex-shrink: $int;
            flex-shrink: $int;
               -ms-flex: $int;
}

// Values: See the flex-basis reference (the default is auto)
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
            flex-basis: $value;
}

// Values: See the flex reference for values and default
@mixin flex($fg: 1, $fs: 0, $fb: auto) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;
  
    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }
  
    -webkit-flex: $fg $fs $fb;
     -webkit-box: $fg-boxflex;
        -moz-box: $fg-boxflex;
        -ms-flex: $fg $fs $fb;
            flex: $fg $fs $fb;
}

// Values: flex-start (default) | flex-end | center | space-between | space-around
@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
           -moz-box-pack: start;
           -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
           -moz-box-pack: end;
           -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
           -moz-box-pack: justify;
           -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;
    } @else {
        -webkit-box-pack: $value;
           -moz-box-pack: $value;
           -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
            justify-content: $value;
}

// Shorter version:
@mixin flex-just($args...) { @include justify-content($args...); }

// Values: flex-start | flex-end | center | baseline | stretch (default)
@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
           -moz-box-align: start;
           -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
           -moz-box-align: end;
           -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
           -moz-box-align: $value;
           -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
            align-items: $value;
}

// Values: auto (default) | flex-start | flex-end | center | baseline | stretch
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}

// Values: flex-start | flex-end | center | space-between | space-around | stretch (default)
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}